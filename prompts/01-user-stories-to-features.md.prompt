# Phase 1: User Stories to Feature Files

## Objective
Convert user stories from `docs/user-stories/` to Gherkin feature files with consistent naming and structure.

## Required Reading
**MUST read these files before proceeding:**

Use the Read tool to load:
1. `docs/user-stories/{specified_feature_name}.md` - The target user story
2. `docs/domain-model.md` - For business rules and entity relationships  
3. `docs/clean-architecture-structure.md` - For understanding code organization
4. `prompts/reference/python-coding-style.md.prompt` - For coding standards and naming conventions

## Step-by-Step Process

### Step 1: Analyze User Story
After reading the user story document, identify:
- [ ] All test scenarios in "Test Scenarios" section
- [ ] API specifications (endpoints, request/response formats)
- [ ] Error codes and HTTP status codes
- [ ] Business rules referenced at the end

### Step 2: Create Directory Structure
Create the following structure:
```
tests/{feature_name}/
├── __init__.py
└── story.feature
```

**Naming Rules:**
- `{feature_name}` must match the user story filename (without `.md`)
- Must be valid Python module name (lowercase, underscores only)
- Example: `submit_command_use_case.md` → `tests/submit_command_use_case/`

### Step 3: Convert Scenarios to Gherkin

**Template Structure:**
```gherkin
Feature: {Human Readable Feature Name}

  @skip
  Scenario: {Scenario name from user story}
    Given {setup conditions}
    When {action performed}  
    Then {expected results}
    And {additional validations}
```

**Conversion Guidelines:**
- Copy scenario names exactly from user story
- Preserve all Given/When/Then steps as specified
- Keep JSON examples in docstrings using `"""`
- **Mark ALL scenarios with @skip initially**
- Maintain exact API specifications and error codes

**BDD Phase Semantic Rules (CRITICAL):**
- **GIVEN steps**: Setup and input state only
  - ✅ "Given client exists with status"
  - ✅ "Given user is authenticated"
  - ❌ "Given response status is 200" (this is result, not input)

- **WHEN steps**: Actions and execution only
  - ✅ "When I POST to endpoint"
  - ✅ "When system processes command"
  - ❌ "When client status should be ONLINE" (this is assertion, not action)

- **THEN steps**: Assertions and verification only
  - ✅ "Then response status code should be 201"
  - ✅ "Then client should be marked as BUSY"
  - ❌ "Then I send another request" (this is action, not assertion)

**Phase Order Validation:**
- Scenarios MUST follow Given → When → Then sequence
- No phase downgrades (e.g. Then → Given) within same scenario
- Multiple Given/When/Then steps are allowed within their phase

**Common Phase Semantic Violations to Avoid:**
```gherkin
# ❌ BAD: Assertion in GIVEN phase
Given response should return 200 status code
# ✅ GOOD: Setup in GIVEN phase  
Given client exists with status "ONLINE"

# ❌ BAD: Action in THEN phase
Then I submit another POST request
# ✅ GOOD: Assertion in THEN phase
Then response status code should be 201

# ❌ BAD: Phase downgrade
Given client exists
When I POST to "/api"  
Then response is 201
Given another client exists  # ❌ Cannot go back to GIVEN

# ✅ GOOD: Proper phase progression
Given client exists
And another client exists with status "IDLE"  # Multiple GIVEN steps OK
When I POST to "/api"
Then response status code should be 201
And response body should contain client data  # Multiple THEN steps OK
```

### Step 4: Validation

Verify the created feature file:
- [ ] Feature name is human-readable
- [ ] All scenarios from user story included
- [ ] All scenarios marked with @skip
- [ ] Gherkin syntax is valid
- [ ] JSON payloads properly formatted in docstrings
- [ ] Directory name is valid Python module
- [ ] **CRITICAL**: BDD phase semantics are correct:
  - [ ] GIVEN steps only contain setup/input state
  - [ ] WHEN steps only contain actions/execution
  - [ ] THEN steps only contain assertions/verification
  - [ ] No phase semantic violations (e.g. assertions in GIVEN)
- [ ] **CRITICAL**: Phase order follows Given → When → Then sequence
- [ ] **CRITICAL**: No phase downgrades within scenarios

## Example Output

Based on `docs/user-stories/submit_command_use_case.md`:

**File:** `tests/submit_command_use_case/story.feature`
```gherkin
Feature: Submit Command

  @skip
  Scenario: Submit command to online idle client
    Given client "client-001" exists with status "ONLINE" and availability "IDLE"
    When I POST to "/commands" with:
      """
      {
        "client_id": "client-001",
        "content": "echo 'hello world'"
      }
      """
    Then response status code should be 201
    And response body should match:
      """
      {
        "command_id": "<uuid>",
        "status": "PENDING",
        "client_id": "client-001"
      }
      """

  @skip
  Scenario: Submit command to offline client
    Given client "client-002" exists with status "OFFLINE"
    When I POST to "/commands" with:
      """
      {
        "client_id": "client-002",
        "content": "ls -la"
      }
      """
    Then response status code should be 400
    And response body should be:
      """
      {
        "error": "Client is not available for command execution",
        "code": "CLIENT_UNAVAILABLE",
        "client_status": "OFFLINE"
      }
      """
```

## Completion Checklist
- [ ] Read all required documents
- [ ] Created feature directory with valid Python module name
- [ ] Converted all scenarios from user story
- [ ] All scenarios marked with @skip
- [ ] Gherkin syntax validated
- [ ] JSON payloads properly formatted
- [ ] **CRITICAL**: BDD phase semantics validated
- [ ] **CRITICAL**: Phase order sequence validated (Given → When → Then)
- [ ] **CRITICAL**: No semantic violations in step classifications

## AI Assistant Behavior Guidelines

### After Feature File Creation
When you complete the feature file creation, you MUST:

1. **Commit your changes FIRST** using git with descriptive commit message
2. **Immediately report progress** (no user confirmation needed) using this exact format:

```
## Progress Report

**Current Phase:** Phase 1 - User Stories to Feature Files
**What we completed:** [e.g., "Created submit_command_use_case feature file with 3 scenarios"]
**Next Phase:** Phase 2 - Walking Skeleton Creation
**What we plan to do:** [e.g., "Create pytest-bdd test infrastructure with step definition skeletons"]

**Feature Created:**
- **User Story:** [User story filename]
- **Feature File:** tests/{feature}/story.feature
- **Scenarios Count:** [Number of scenarios converted]
- **All scenarios marked:** @skip ✅

**Validation Results:**
- ✅ Feature directory created with valid Python module name
- ✅ All scenarios from user story converted to Gherkin
- ✅ JSON payloads properly formatted in docstrings
- ✅ Gherkin syntax validated
- ✅ **BDD phase semantics validated** (Given=setup, When=action, Then=assertion)
- ✅ **Phase order sequence validated** (Given → When → Then flow)
```

3. **Always validate** the created feature file for syntax errors before proceeding
4. **Automatically proceed to next phase** (no user confirmation needed)

### Multiple Feature Files
If converting multiple user stories in sequence, provide progress report after EACH feature file creation, then automatically continue to next feature conversion.

### Workflow Requirements
- **SEQUENCE CRITICAL**: Always commit FIRST, then report progress
- **AUTOMATIC FLOW**: After reporting, immediately proceed to next phase or next feature
- **VALIDATION REQUIRED**: Always validate feature file syntax before proceeding
- **NO CONFIRMATION NEEDED**: Do not wait for user approval to continue
- **CONTINUOUS CONVERSION**: When multiple features needed, convert them sequentially with individual reports

## Next Step
After completing this phase, proceed to:
`02-walking-skeleton.md.prompt` - Create pytest-bdd testing infrastructure